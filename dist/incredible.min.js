!function(o,r){"use strict";var t,e;t=function(o){var r,e,n;for(o=o||{},r=1;r<arguments.length;r+=1)if(e=arguments[r])for(n in e)e.hasOwnProperty(n)&&("object"==typeof e[n]?t(o[n],e[n]):o[n]=e[n]);return o},e=function(o){var e,n,l,u,a,i,c,d,f,s,g,b,h=t({backgroundColor:"#2980b9",strokeColor:"#fff",modulo:1e3,debug:!1,background:!0,multiple:10,pas:1},o),p=new r(1200,1200),k=550,m=550,y=500,w=2*Math.PI/h.modulo,C=[];for((h.debug||h.background)&&(b=p.circle(k,m,y),b.attr({fill:h.backgroundColor,strokeWidth:5})),s=0;s<h.modulo;s+=h.pas)l=w*s,e=k+y*Math.cos(l),n=m+y*Math.sin(l),C.push({x:e,y:n}),h.debug&&p.circle(e,n,10).attr({fill:"red"});for(g=0;g<C.length;g+=1)u=C[g],a=C[g*h.multiple%h.modulo],i=u.x,c=u.y,d=a.x,f=a.y,p.path("M "+i+" "+c+"L "+d+" "+f).attr({stroke:h.strokeColor})},o.incredible=e}(window,Snap);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluY3JlZGlibGUuanMiXSwibmFtZXMiOlsiZXhwb3J0cyIsIlNuYXAiLCJleHRlbmQiLCJpbmNyZWRpYmxlIiwib3V0IiwiaSIsIm9iaiIsImtleSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImhhc093blByb3BlcnR5IiwicGFyYW1zIiwibmV3WCIsIm5ld1kiLCJhbmdsZSIsInBvaW50U3RhcnQiLCJwb2ludEVuZCIsIk14IiwiTXkiLCJMeCIsIkx5IiwieSIsImRlYnVnQ2lyY2xlIiwiYXJncyIsImJhY2tncm91bmRDb2xvciIsInN0cm9rZUNvbG9yIiwibW9kdWxvIiwiZGVidWciLCJiYWNrZ3JvdW5kIiwibXVsdGlwbGUiLCJwYXMiLCJzIiwiY2lyY2xlWCIsImNpcmNsZVkiLCJjaXJjbGVSYWRpdXMiLCJzbGljZSIsIk1hdGgiLCJQSSIsInBvaW50cyIsImNpcmNsZSIsImF0dHIiLCJmaWxsIiwic3Ryb2tlV2lkdGgiLCJjb3MiLCJzaW4iLCJwdXNoIiwieCIsInBhdGgiLCJzdHJva2UiLCJ3aW5kb3ciXSwibWFwcGluZ3MiOiJDQU9DLFNBQVVBLEVBQVNDLEdBQ2hCLFlBQ0EsSUFBSUMsR0FDQUMsQ0FFSkQsR0FBUyxTQUFVRSxHQUNmLEdBQUlDLEdBQ0FDLEVBQ0FDLENBR0osS0FGQUgsRUFBTUEsTUFFREMsRUFBSSxFQUFHQSxFQUFJRyxVQUFVQyxPQUFRSixHQUFLLEVBR25DLEdBRkFDLEVBQU1FLFVBQVVILEdBR1osSUFBS0UsSUFBT0QsR0FDSkEsRUFBSUksZUFBZUgsS0FDSyxnQkFBYkQsR0FBSUMsR0FDWEwsRUFBT0UsRUFBSUcsR0FBTUQsRUFBSUMsSUFFckJILEVBQUlHLEdBQU9ELEVBQUlDLEdBT25DLE9BQU9ILElBR1hELEVBQWEsU0FBVVEsR0FDbkIsR0FjSUMsR0FDQUMsRUFJQUMsRUFFQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQWYsRUFDQWdCLEVBQ0FDLEVBN0JBQyxFQUFPckIsR0FDSHNCLGdCQUFpQixVQUNqQkMsWUFBYSxPQUNiQyxPQUFRLElBQ1JDLE9BQU8sRUFDUEMsWUFBWSxFQUNaQyxTQUFVLEdBQ1ZDLElBQUssR0FDTm5CLEdBRUhvQixFQUFJLEdBQUk5QixHQUFLLEtBQU0sTUFDbkIrQixFQUFVLElBQ1ZDLEVBQVUsSUFDVkMsRUFBZSxJQUtmQyxFQUFRLEVBQUlDLEtBQUtDLEdBQUtkLEVBQUtHLE9BRTNCWSxJQXVCSixNQVpJZixFQUFLSSxPQUFTSixFQUFLSyxjQUNuQk4sRUFBY1MsRUFBRVEsT0FBT1AsRUFBU0MsRUFBU0MsR0FHekNaLEVBQVlrQixNQUNSQyxLQUFNbEIsRUFBS0MsZ0JBQ1hrQixZQUFhLEtBTWhCckMsRUFBSSxFQUFHQSxFQUFJa0IsRUFBS0csT0FBUXJCLEdBQUtrQixFQUFLTyxJQUNuQ2hCLEVBQVFxQixFQUFROUIsRUFFaEJPLEVBQVFvQixFQUFVRSxFQUFlRSxLQUFLTyxJQUFJN0IsR0FDMUNELEVBQVFvQixFQUFVQyxFQUFlRSxLQUFLUSxJQUFJOUIsR0FDMUN3QixFQUFPTyxNQUFNQyxFQUFHbEMsRUFBTVMsRUFBR1IsSUFFckJVLEVBQUtJLE9BQ0xJLEVBQUVRLE9BQU8zQixFQUFNQyxFQUFNLElBQUkyQixNQUNyQkMsS0FBTSxPQU1sQixLQUFLcEIsRUFBSSxFQUFHQSxFQUFJaUIsRUFBTzdCLE9BQVFZLEdBQUssRUFDaENOLEVBQWF1QixFQUFPakIsR0FDcEJMLEVBQVdzQixFQUFRakIsRUFBSUUsRUFBS00sU0FBWU4sRUFBS0csUUFDN0NULEVBQUtGLEVBQVcrQixFQUNoQjVCLEVBQUtILEVBQVdNLEVBQ2hCRixFQUFLSCxFQUFTOEIsRUFDZDFCLEVBQUtKLEVBQVNLLEVBRWRVLEVBQUVnQixLQUFLLEtBQU85QixFQUFLLElBQU1DLEVBQUssS0FBT0MsRUFBSyxJQUFNQyxHQUFJb0IsTUFBTVEsT0FBUXpCLEVBQUtFLGVBTS9FekIsRUFBUUcsV0FBYUEsR0FDdkI4QyxPQUFRaEQiLCJmaWxlIjoiaW5jcmVkaWJsZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFByb2plY3QgOiBpbmNyZWRpYmxlXG4gKiBGaWxlIDogaW5jcmVkaWJsZS5qc1xuICogRGF0ZSA6IDExLzA3LzIwMTVcbiAqIEF1dGhvciA6IFZpbmNlbnQgTG95IDx2aW5jZW50LmxveTFAZ21haWwuY29tPlxuICovXG4vKmdsb2JhbCB3aW5kb3csIGRvY3VtZW50LCBTbmFwKi9cbihmdW5jdGlvbiAoZXhwb3J0cywgU25hcCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgZXh0ZW5kLFxuICAgICAgICBpbmNyZWRpYmxlO1xuXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG9iaixcbiAgICAgICAgICAgIGtleTtcbiAgICAgICAgb3V0ID0gb3V0IHx8IHt9O1xuXG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIG9iaiA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKG91dFtrZXldLCBvYmpba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dFtrZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG5cbiAgICBpbmNyZWRpYmxlID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgYXJncyA9IGV4dGVuZCh7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzI5ODBiOScsXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgICAgICAgICBtb2R1bG86IDEwMDAsXG4gICAgICAgICAgICAgICAgZGVidWc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbXVsdGlwbGU6IDEwLFxuICAgICAgICAgICAgICAgIHBhczogMVxuICAgICAgICAgICAgfSwgcGFyYW1zKSxcblxuICAgICAgICAgICAgcyA9IG5ldyBTbmFwKDEyMDAsIDEyMDApLFxuICAgICAgICAgICAgY2lyY2xlWCA9IDU1MCxcbiAgICAgICAgICAgIGNpcmNsZVkgPSA1NTAsXG4gICAgICAgICAgICBjaXJjbGVSYWRpdXMgPSA1MDAsXG4gICAgICAgICAgICBuZXdYLFxuICAgICAgICAgICAgbmV3WSxcbiAgICAgICAgLy9vcmlnaW5YID0gY2lyY2xlWCArIChjaXJjbGVSYWRpdXMgKiBNYXRoLnNpbigwKSksXG4gICAgICAgIC8vb3JpZ2luWSA9IGNpcmNsZVkgLSAoY2lyY2xlUmFkaXVzICogTWF0aC5jb3MoMCkpLFxuICAgICAgICAgICAgc2xpY2UgPSAyICogTWF0aC5QSSAvIGFyZ3MubW9kdWxvLFxuICAgICAgICAgICAgYW5nbGUsXG4gICAgICAgICAgICBwb2ludHMgPSBbXSxcbiAgICAgICAgICAgIHBvaW50U3RhcnQsXG4gICAgICAgICAgICBwb2ludEVuZCxcbiAgICAgICAgICAgIE14LFxuICAgICAgICAgICAgTXksXG4gICAgICAgICAgICBMeCxcbiAgICAgICAgICAgIEx5LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHksXG4gICAgICAgICAgICBkZWJ1Z0NpcmNsZTtcblxuICAgICAgICBpZiAoYXJncy5kZWJ1ZyB8fCBhcmdzLmJhY2tncm91bmQpIHtcbiAgICAgICAgICAgIGRlYnVnQ2lyY2xlID0gcy5jaXJjbGUoY2lyY2xlWCwgY2lyY2xlWSwgY2lyY2xlUmFkaXVzKTtcbiAgICAgICAgICAgIC8vdmFyIEwxID0gcy5wYXRoKFwiTSBcIiArIGNpcmNsZVggKyBcIiBcIiArIGNpcmNsZVkgKyBcIkwgMCAwXCIpLmF0dHIoe3N0cm9rZTogXCJibHVlXCJ9KTtcbiAgICAgICAgICAgIC8vQnkgZGVmYXVsdCBpdHMgYmxhY2ssIGxldHMgY2hhbmdlIGl0cyBhdHRyaWJ1dGVzXG4gICAgICAgICAgICBkZWJ1Z0NpcmNsZS5hdHRyKHtcbiAgICAgICAgICAgICAgICBmaWxsOiBhcmdzLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogNVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL3ZhciBjMSA9IHMuY2lyY2xlKG5ld1gsIG5ld1ksIDEwKS5hdHRyKHtmaWxsOiBcInJlZFwifSk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZ3MubW9kdWxvOyBpICs9IGFyZ3MucGFzKSB7XG4gICAgICAgICAgICBhbmdsZSA9IHNsaWNlICogaTtcblxuICAgICAgICAgICAgbmV3WCA9IChjaXJjbGVYICsgY2lyY2xlUmFkaXVzICogTWF0aC5jb3MoYW5nbGUpKTtcbiAgICAgICAgICAgIG5ld1kgPSAoY2lyY2xlWSArIGNpcmNsZVJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKSk7XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7eDogbmV3WCwgeTogbmV3WX0pO1xuXG4gICAgICAgICAgICBpZiAoYXJncy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgIHMuY2lyY2xlKG5ld1gsIG5ld1ksIDEwKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJ3JlZCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgZm9yICh5ID0gMDsgeSA8IHBvaW50cy5sZW5ndGg7IHkgKz0gMSkge1xuICAgICAgICAgICAgcG9pbnRTdGFydCA9IHBvaW50c1t5XTtcbiAgICAgICAgICAgIHBvaW50RW5kID0gcG9pbnRzWyh5ICogYXJncy5tdWx0aXBsZSkgJSBhcmdzLm1vZHVsb107XG4gICAgICAgICAgICBNeCA9IHBvaW50U3RhcnQueDtcbiAgICAgICAgICAgIE15ID0gcG9pbnRTdGFydC55O1xuICAgICAgICAgICAgTHggPSBwb2ludEVuZC54O1xuICAgICAgICAgICAgTHkgPSBwb2ludEVuZC55O1xuXG4gICAgICAgICAgICBzLnBhdGgoXCJNIFwiICsgTXggKyBcIiBcIiArIE15ICsgXCJMIFwiICsgTHggKyBcIiBcIiArIEx5KS5hdHRyKHtzdHJva2U6IGFyZ3Muc3Ryb2tlQ29sb3J9KTtcbiAgICAgICAgfVxuXG5cbiAgICB9O1xuXG4gICAgZXhwb3J0cy5pbmNyZWRpYmxlID0gaW5jcmVkaWJsZTtcbn0od2luZG93LCBTbmFwKSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=