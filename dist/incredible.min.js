!function(o,r){"use strict";var t,e;t=function(o){var r,e,n;for(o=o||{},r=1;r<arguments.length;r+=1)if(e=arguments[r])for(n in e)e.hasOwnProperty(n)&&("object"==typeof e[n]?t(o[n],e[n]):o[n]=e[n]);return o},e=function(o,e){var n,l,u,a,d,i,c,f,s,g,b,m,h=t({backgroundColor:"#2980b9",strokeColor:"#fff",modulo:1e3,debug:!1,background:!0,multiple:10,pas:1},e),p=(document.getElementById(o),new r(1200,1200)),k=550,y=550,w=500,C=2*Math.PI/h.modulo,M=[];for((h.debug||h.background)&&(m=p.circle(k,y,w),m.attr({fill:h.backgroundColor,strokeWidth:5})),g=0;g<h.modulo;g+=h.pas)u=C*g,n=k+w*Math.cos(u),l=y+w*Math.sin(u),M.push({x:n,y:l}),h.debug&&p.circle(n,l,10).attr({fill:"red"});for(b=0;b<M.length;b+=1)a=M[b],d=M[b*h.multiple%h.modulo],i=a.x,c=a.y,f=d.x,s=d.y,p.path("M "+i+" "+c+"L "+f+" "+s).attr({stroke:h.strokeColor})},o.incredible=e}(window,Snap);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluY3JlZGlibGUuanMiXSwibmFtZXMiOlsiZXhwb3J0cyIsIlNuYXAiLCJleHRlbmQiLCJpbmNyZWRpYmxlIiwib3V0IiwiaSIsIm9iaiIsImtleSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImhhc093blByb3BlcnR5IiwiZWx0IiwicGFyYW1zIiwibmV3WCIsIm5ld1kiLCJhbmdsZSIsInBvaW50U3RhcnQiLCJwb2ludEVuZCIsIk14IiwiTXkiLCJMeCIsIkx5IiwieSIsImRlYnVnQ2lyY2xlIiwiYXJncyIsImJhY2tncm91bmRDb2xvciIsInN0cm9rZUNvbG9yIiwibW9kdWxvIiwiZGVidWciLCJiYWNrZ3JvdW5kIiwibXVsdGlwbGUiLCJwYXMiLCJzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNpcmNsZVgiLCJjaXJjbGVZIiwiY2lyY2xlUmFkaXVzIiwic2xpY2UiLCJNYXRoIiwiUEkiLCJwb2ludHMiLCJjaXJjbGUiLCJhdHRyIiwiZmlsbCIsInN0cm9rZVdpZHRoIiwiY29zIiwic2luIiwicHVzaCIsIngiLCJwYXRoIiwic3Ryb2tlIiwid2luZG93Il0sIm1hcHBpbmdzIjoiQ0FPQyxTQUFVQSxFQUFTQyxHQUNoQixZQUNBLElBQUlDLEdBQ0FDLENBRUpELEdBQVMsU0FBVUUsR0FDZixHQUFJQyxHQUNBQyxFQUNBQyxDQUdKLEtBRkFILEVBQU1BLE1BRURDLEVBQUksRUFBR0EsRUFBSUcsVUFBVUMsT0FBUUosR0FBSyxFQUduQyxHQUZBQyxFQUFNRSxVQUFVSCxHQUdaLElBQUtFLElBQU9ELEdBQ0pBLEVBQUlJLGVBQWVILEtBQ0ssZ0JBQWJELEdBQUlDLEdBQ1hMLEVBQU9FLEVBQUlHLEdBQU1ELEVBQUlDLElBRXJCSCxFQUFJRyxHQUFPRCxFQUFJQyxHQU9uQyxPQUFPSCxJQUdYRCxFQUFhLFNBQVVRLEVBQUtDLEdBQ3hCLEdBZUlDLEdBQ0FDLEVBSUFDLEVBRUFDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FoQixFQUNBaUIsRUFDQUMsRUE5QkFDLEVBQU90QixHQUNIdUIsZ0JBQWlCLFVBQ2pCQyxZQUFhLE9BQ2JDLE9BQVEsSUFDUkMsT0FBTyxFQUNQQyxZQUFZLEVBQ1pDLFNBQVUsR0FDVkMsSUFBSyxHQUNObkIsR0FHSG9CLEdBRktDLFNBQVNDLGVBQWV2QixHQUV6QixHQUFJVixHQUFLLEtBQU0sT0FDbkJrQyxFQUFVLElBQ1ZDLEVBQVUsSUFDVkMsRUFBZSxJQUtmQyxFQUFRLEVBQUlDLEtBQUtDLEdBQUtoQixFQUFLRyxPQUUzQmMsSUF1QkosTUFaSWpCLEVBQUtJLE9BQVNKLEVBQUtLLGNBQ25CTixFQUFjUyxFQUFFVSxPQUFPUCxFQUFTQyxFQUFTQyxHQUd6Q2QsRUFBWW9CLE1BQ1JDLEtBQU1wQixFQUFLQyxnQkFDWG9CLFlBQWEsS0FNaEJ4QyxFQUFJLEVBQUdBLEVBQUltQixFQUFLRyxPQUFRdEIsR0FBS21CLEVBQUtPLElBQ25DaEIsRUFBUXVCLEVBQVFqQyxFQUVoQlEsRUFBUXNCLEVBQVVFLEVBQWVFLEtBQUtPLElBQUkvQixHQUMxQ0QsRUFBUXNCLEVBQVVDLEVBQWVFLEtBQUtRLElBQUloQyxHQUMxQzBCLEVBQU9PLE1BQU1DLEVBQUdwQyxFQUFNUyxFQUFHUixJQUVyQlUsRUFBS0ksT0FDTEksRUFBRVUsT0FBTzdCLEVBQU1DLEVBQU0sSUFBSTZCLE1BQ3JCQyxLQUFNLE9BTWxCLEtBQUt0QixFQUFJLEVBQUdBLEVBQUltQixFQUFPaEMsT0FBUWEsR0FBSyxFQUNoQ04sRUFBYXlCLEVBQU9uQixHQUNwQkwsRUFBV3dCLEVBQVFuQixFQUFJRSxFQUFLTSxTQUFZTixFQUFLRyxRQUM3Q1QsRUFBS0YsRUFBV2lDLEVBQ2hCOUIsRUFBS0gsRUFBV00sRUFDaEJGLEVBQUtILEVBQVNnQyxFQUNkNUIsRUFBS0osRUFBU0ssRUFFZFUsRUFBRWtCLEtBQUssS0FBT2hDLEVBQUssSUFBTUMsRUFBSyxLQUFPQyxFQUFLLElBQU1DLEdBQUlzQixNQUFNUSxPQUFRM0IsRUFBS0UsZUFNL0UxQixFQUFRRyxXQUFhQSxHQUN2QmlELE9BQVFuRCIsImZpbGUiOiJpbmNyZWRpYmxlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUHJvamVjdCA6IGluY3JlZGlibGVcbiAqIEZpbGUgOiBpbmNyZWRpYmxlLmpzXG4gKiBEYXRlIDogMTEvMDcvMjAxNVxuICogQXV0aG9yIDogVmluY2VudCBMb3kgPHZpbmNlbnQubG95MUBnbWFpbC5jb20+XG4gKi9cbi8qZ2xvYmFsIHdpbmRvdywgZG9jdW1lbnQsIFNuYXAqL1xuKGZ1bmN0aW9uIChleHBvcnRzLCBTbmFwKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBleHRlbmQsXG4gICAgICAgIGluY3JlZGlibGU7XG5cbiAgICBleHRlbmQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgb2JqLFxuICAgICAgICAgICAga2V5O1xuICAgICAgICBvdXQgPSBvdXQgfHwge307XG5cbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgb2JqID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmpba2V5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbmQob3V0W2tleV0sIG9ialtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0W2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcblxuICAgIGluY3JlZGlibGUgPSBmdW5jdGlvbiAoZWx0LCBwYXJhbXMpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBleHRlbmQoe1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMyOTgwYjknLFxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiAnI2ZmZicsXG4gICAgICAgICAgICAgICAgbW9kdWxvOiAxMDAwLFxuICAgICAgICAgICAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cnVlLFxuICAgICAgICAgICAgICAgIG11bHRpcGxlOiAxMCxcbiAgICAgICAgICAgICAgICBwYXM6IDFcbiAgICAgICAgICAgIH0sIHBhcmFtcyksXG4gICAgICAgICAgICBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsdCksXG5cbiAgICAgICAgICAgIHMgPSBuZXcgU25hcCgxMjAwLCAxMjAwKSxcbiAgICAgICAgICAgIGNpcmNsZVggPSA1NTAsXG4gICAgICAgICAgICBjaXJjbGVZID0gNTUwLFxuICAgICAgICAgICAgY2lyY2xlUmFkaXVzID0gNTAwLFxuICAgICAgICAgICAgbmV3WCxcbiAgICAgICAgICAgIG5ld1ksXG4gICAgICAgIC8vb3JpZ2luWCA9IGNpcmNsZVggKyAoY2lyY2xlUmFkaXVzICogTWF0aC5zaW4oMCkpLFxuICAgICAgICAvL29yaWdpblkgPSBjaXJjbGVZIC0gKGNpcmNsZVJhZGl1cyAqIE1hdGguY29zKDApKSxcbiAgICAgICAgICAgIHNsaWNlID0gMiAqIE1hdGguUEkgLyBhcmdzLm1vZHVsbyxcbiAgICAgICAgICAgIGFuZ2xlLFxuICAgICAgICAgICAgcG9pbnRzID0gW10sXG4gICAgICAgICAgICBwb2ludFN0YXJ0LFxuICAgICAgICAgICAgcG9pbnRFbmQsXG4gICAgICAgICAgICBNeCxcbiAgICAgICAgICAgIE15LFxuICAgICAgICAgICAgTHgsXG4gICAgICAgICAgICBMeSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgZGVidWdDaXJjbGU7XG5cbiAgICAgICAgaWYgKGFyZ3MuZGVidWcgfHwgYXJncy5iYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgICBkZWJ1Z0NpcmNsZSA9IHMuY2lyY2xlKGNpcmNsZVgsIGNpcmNsZVksIGNpcmNsZVJhZGl1cyk7XG4gICAgICAgICAgICAvL3ZhciBMMSA9IHMucGF0aChcIk0gXCIgKyBjaXJjbGVYICsgXCIgXCIgKyBjaXJjbGVZICsgXCJMIDAgMFwiKS5hdHRyKHtzdHJva2U6IFwiYmx1ZVwifSk7XG4gICAgICAgICAgICAvL0J5IGRlZmF1bHQgaXRzIGJsYWNrLCBsZXRzIGNoYW5nZSBpdHMgYXR0cmlidXRlc1xuICAgICAgICAgICAgZGVidWdDaXJjbGUuYXR0cih7XG4gICAgICAgICAgICAgICAgZmlsbDogYXJncy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy92YXIgYzEgPSBzLmNpcmNsZShuZXdYLCBuZXdZLCAxMCkuYXR0cih7ZmlsbDogXCJyZWRcIn0pO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmdzLm1vZHVsbzsgaSArPSBhcmdzLnBhcykge1xuICAgICAgICAgICAgYW5nbGUgPSBzbGljZSAqIGk7XG5cbiAgICAgICAgICAgIG5ld1ggPSAoY2lyY2xlWCArIGNpcmNsZVJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKSk7XG4gICAgICAgICAgICBuZXdZID0gKGNpcmNsZVkgKyBjaXJjbGVSYWRpdXMgKiBNYXRoLnNpbihhbmdsZSkpO1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goe3g6IG5ld1gsIHk6IG5ld1l9KTtcblxuICAgICAgICAgICAgaWYgKGFyZ3MuZGVidWcpIHtcbiAgICAgICAgICAgICAgICBzLmNpcmNsZShuZXdYLCBuZXdZLCAxMCkuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6ICdyZWQnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIGZvciAoeSA9IDA7IHkgPCBwb2ludHMubGVuZ3RoOyB5ICs9IDEpIHtcbiAgICAgICAgICAgIHBvaW50U3RhcnQgPSBwb2ludHNbeV07XG4gICAgICAgICAgICBwb2ludEVuZCA9IHBvaW50c1soeSAqIGFyZ3MubXVsdGlwbGUpICUgYXJncy5tb2R1bG9dO1xuICAgICAgICAgICAgTXggPSBwb2ludFN0YXJ0Lng7XG4gICAgICAgICAgICBNeSA9IHBvaW50U3RhcnQueTtcbiAgICAgICAgICAgIEx4ID0gcG9pbnRFbmQueDtcbiAgICAgICAgICAgIEx5ID0gcG9pbnRFbmQueTtcblxuICAgICAgICAgICAgcy5wYXRoKFwiTSBcIiArIE14ICsgXCIgXCIgKyBNeSArIFwiTCBcIiArIEx4ICsgXCIgXCIgKyBMeSkuYXR0cih7c3Ryb2tlOiBhcmdzLnN0cm9rZUNvbG9yfSk7XG4gICAgICAgIH1cblxuXG4gICAgfTtcblxuICAgIGV4cG9ydHMuaW5jcmVkaWJsZSA9IGluY3JlZGlibGU7XG59KHdpbmRvdywgU25hcCkpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9